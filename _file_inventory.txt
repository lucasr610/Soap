# ATI Oracle Engine ‚Äî Essentials Manifest
# Last Verified: 2025-07-07

### ‚úÖ Core Backend API & Upload System
/backend/main.py                  # Handles uploads, chunk detection, Mongo test
/backend/utils/auth.py           # API token validation
/backend/utils/logger.py         # Log event to rotor overlay
/backend/utils/mongo.py          # Connect to MongoDB, get_collection
/backend/utils/file_utils.py     # File cleanup, hash tools (TBD)
/backend/start.sh                # (Optional) manual start script
/backend/requirements.txt        # Backend Python dependencies
/backend/routes/synthesize.py    # POST /synthesize ‚Üí trigger pipeline job
/backend/routes/upload_manual.py # POST /upload/manual ‚Üí basic file upload
/backend/routes/chat.py          # POST /chat ‚Üí AI chat with soap_phase
/backend/routes/scrape_url.py    # POST /scrape/url ‚Üí web_scraper_agent crawl
/backend/routes/roles.py         # GET /roles ‚Üí fetch user roles
/backend/routes/pipeline_status.py # GET /pipeline/status/{file_id}
/backend/routes/pipeline_history.py # GET /pipeline/history
/backend/routes/log.py           # GET /log ‚Üí returns rotor_fusion.log
/backend/routes/config.py        # GET /config ‚Üí system info JSON
/backend/routes/token_check.py   # GET /check-token ‚Üí validates token
/backend/routes/upload_list.py   # GET /upload/list ‚Üí uploaded filenames
/backend/routes/system_status.py # GET /status ‚Üí heartbeat + system check
/backend/routes/heartbeat.py     # GET /heartbeat ‚Üí simple ping
/backend/routes/system_ping.py   # GET /ping ‚Üí alternative health check
/backend/routes/manual_info.py   # GET /manual/info/{id} ‚Üí return manual json
/backend/routes/vector_search.py # POST /vector/search/{engine} ‚Üí find similar
/backend/routes/sop_generate.py  # POST /sop/generate ‚Üí Watson + Soap output

### üîÅ Rotor Engine & Control
/core/boot.py                     # +BOOT: trigger attention > code_red > spin_up
/core/code_red.py                # +CODE-RED: offload /upload with chunker
/core/spin_up.py                 # +SPIN-UP: restore from GCS + re-chunk
/core/spin_down.py               # +SPIN-DOWN: save zip to GCS
/core/saveall.py                 # +SAVEALL: sync to GitHub, GCS, Mongo
/core/rotor_fusion.py            # Core rotor: SHA, stream, Mongo, delete
/core/rotor_overlay.py           # Central logging
/core/cloud_stream_relay.py      # ‚úÖ Uses gsutil composite mode (no crcmod needed)
/core/log_compression.py         # Gzips logs for overlay space savings
/core/fetch_secrets_from_mongo.py # (optional) auto-load creds from DB

### üîê MongoDB Chunking + Recovery
/core/mongo_safe_upload_v2.py     # Uploads full or chunked to Mongo
/core/fusion_restore_v2.py        # Rebuilds file from MongoDB
/core/gcs_update_checker.py       # OTA zip checker
/core/ota_update.py               # Self-apply from latest GCS zip

### üß© Rotor Chunking & Rebuild
/core/rotor_chunk_and_stream.py   # Splits large files + logs manifest
/core/manifest_rebuilder.py       # Reassembles file from manifest
/overlay/*.manifest.json          # Chunk map for large file restoration
~/Soap/rebuilds/                  # Rebuilt file output

### üß† AI SOP Engine & Agents
/core/vectorizer.py               # OpenAI, Gemini, Ollama embeddings
/core/chunking.py                 # Text splitting
/core/text_extract.py             # Extract from txt, docx, pdf
/core/mongo_vectors.py            # Store SOP chunks in Mongo
/core/warm_vector_loader.py       # Load warm vector memory
/core/arbiter_phase.py            # Conflict resolver with ‚ö†Ô∏è output
/core/arbiter_output_test.py      # Arbiter test runner
/agents/soap_phase.py             # Finalize explanation for techs
/agents/watson_phase.py           # Format SOP into Watson structure
/agents/web_scraper_agent.py      # Deep crawler with deduplication

### üß™ Test Files (safe local validation)
/tests/route_test.py              # GET /ping endpoint tester
/tests/vector_test.py            # vectorizer.py test with sample
/tests/manual_upload_test.py     # Upload sample_manual.txt to backend

### üß† Memory & Ontology State
/memory/vector_memory.json        # Vector results from parsed manuals
/memory/ontology_index.json       # Keyword ‚Üí SOP ontology
/memory/agent_state.json          # Arbiter/warm-start tracking

### üîê Secrets (DO NOT COMMIT)
/secrets/openai.key               # OpenAI API key
/secrets/gemini.key               # Gemini API key
/secrets/gcs-creds.json           # GCS service account
/secrets/mongo-creds.json         # Mongo URI/key

### üåê Config & Status
/.env                             # Stores API_TOKEN, MONGO_URI
/_file_inventory.txt              # This file
/logs/rotor_overlay.log           # Rotor event log
/logs/.keep                       # Keep log folder in repo
/upload/.keep                     # Placeholder for upload staging
/overlay/.keep                    # Keeps overlay active
