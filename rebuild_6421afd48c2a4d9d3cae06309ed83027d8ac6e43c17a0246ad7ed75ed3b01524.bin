#!/usr/bin/env python3
"""
spin_up.py: Launch all rotor agents as background processes.
Usage:
  python3 spin_up.py
"""
import sys
import time
import logging
from pathlib import Path
import subprocess

# Configuration
HOME_DIR = Path.home()
SOAP_DIR = HOME_DIR / "Soap"
SCRIPT_DIR = SOAP_DIR
LOG_DIR = SOAP_DIR / "data" / "logs"
LOG_FILE = LOG_DIR / "spin_up.log"

# List of rotor scripts to launch
ROTOR_SCRIPTS = [
    "rotor_overlay.py",
    "rotor_fusion.py",
    "fusion_restore_v2.py",
]

# Time to wait between starting each rotor (seconds)
START_INTERVAL = 1.25


def setup_logging():
    LOG_DIR.mkdir(parents=True, exist_ok=True)
    logging.basicConfig(
        filename=str(LOG_FILE),
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(message)s'
    )

logger = logging.getLogger()

def launch_rotor(script_name: str):
    script_path = SCRIPT_DIR / script_name
    if not script_path.exists():
        msg = f"‚ùå Missing rotor script: {script_name}"
        print(msg)
        logger.warning(msg)
        return

    cmd = ["nohup", "python3", str(script_path)]
    try:
        # Open log file for appending
        with open(LOG_FILE, "a") as log_fh:
            subprocess.Popen(
                cmd,
                cwd=str(SCRIPT_DIR),
                stdout=log_fh,
                stderr=log_fh,
                close_fds=True
            )
        msg = f"üöÄ Launched rotor: {script_name}"
        print(msg)
        logger.info(msg)
    except Exception as e:
        msg = f"‚ùå Failed to launch {script_name}: {e}"
        print(msg)
        logger.error(msg)


def main():
    setup_logging()
    print("üîß [SPIN-UP] Activating rotor agents...")
    logger.info("Starting spin-up sequence.")

    for script in ROTOR_SCRIPTS:
        launch_rotor(script)
        time.sleep(START_INTERVAL)

    print("‚úÖ [SPIN-UP] All rotor agents launched.")
    logger.info("Spin-up sequence complete.")

if __name__ == "__main__":
    main()
